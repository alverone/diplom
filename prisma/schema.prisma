generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Book {
  id          String    @id @default(uuid())
  title       String    @unique
  description String
  price       Float
  publishDate DateTime  @map("publish_date")
  pageLength  Int       @map("page_length")
  type        BookType  @default(PAPER)
  categoryId  String    @map("category_id")
  publisherId String    @map("publisher_id")
  authorId    String    @map("author_id")
  author      Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  publisher   Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  @@map("books")
}

model Author {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  books       Book[]

  @@map("authors")
}

model Category {
  id          String  @id @default(uuid())
  title       String  @unique
  description String?
  books       Book[]

  @@map("categories")
}

model Publisher {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  books       Book[]

  @@map("publishers")
}

enum BookType {
  ELECTRONIC
  PAPER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}